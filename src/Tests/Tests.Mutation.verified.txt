{
  ExecutionResult: {
    Executed: true,
    Data: {
      SelectionSet: {
        Kind: SelectionSet,
        Selections: [
          {
            Kind: Field,
            Name: {
              Value: {
                IsEmpty: false
              },
              StringValue: withAttachment
            },
            Arguments: [
              {
                Kind: Argument,
                Name: {
                  Value: {
                    IsEmpty: false
                  },
                  StringValue: argument
                },
                Value: {
                  Kind: StringValue,
                  Value: {
                    IsEmpty: false
                  }
                }
              }
            ],
            SelectionSet: {
              Kind: SelectionSet,
              Selections: [
                {
                  Kind: Field,
                  Name: {
                    Value: {
                      IsEmpty: false
                    },
                    StringValue: argument
                  }
                }
              ]
            }
          }
        ]
      },
      SubFields: [
        {
          SubFields: [
            {
              GraphType: {
                Name: String,
                IsPrivate: false
              },
              Field: {
                Kind: Field,
                Name: {
                  Value: {
                    IsEmpty: false
                  },
                  StringValue: argument
                }
              },
              FieldDefinition: {
                Name: argument,
                Type: NonNullGraphType<StringGraphType>,
                ResolvedType: {
                  Type: StringGraphType,
                  ResolvedType: {
                    Name: String,
                    IsPrivate: false
                  },
                  IsPrivate: false
                },
                Resolver: {},
                IsPrivate: false,
                Metadata: {
                  ORIGINAL_EXPRESSION_PROPERTY_NAME: Argument
                }
              },
              Name: argument,
              Result: argumentValue,
              Source: {
                Argument: argumentValue
              },
              Path: [
                withAttachment,
                argument
              ],
              ResponsePath: [
                withAttachment,
                argument
              ]
            }
          ],
          SelectionSet: {
            Kind: SelectionSet,
            Selections: [
              {
                Kind: Field,
                Name: {
                  Value: {
                    IsEmpty: false
                  },
                  StringValue: argument
                }
              }
            ]
          },
          GraphType: {
            IsTypeOf: {
              Type: Func<object, bool>,
              Target: ObjectGraphType<Result>.<>c,
              Method: Boolean .ctor(System.Object)
            },
            SkipTypeCheck: false,
            Interfaces: [],
            ResolvedInterfaces: [],
            Fields: [
              {
                Name: argument,
                Type: NonNullGraphType<StringGraphType>,
                ResolvedType: {
                  Type: StringGraphType,
                  ResolvedType: {
                    Name: String,
                    IsPrivate: false
                  },
                  IsPrivate: false
                },
                Resolver: {},
                IsPrivate: false,
                Metadata: {
                  ORIGINAL_EXPRESSION_PROPERTY_NAME: Argument
                }
              }
            ],
            Name: ResultGraph,
            IsPrivate: false
          },
          Field: {
            Kind: Field,
            Name: {
              Value: {
                IsEmpty: false
              },
              StringValue: withAttachment
            },
            Arguments: [
              {
                Kind: Argument,
                Name: {
                  Value: {
                    IsEmpty: false
                  },
                  StringValue: argument
                },
                Value: {
                  Kind: StringValue,
                  Value: {
                    IsEmpty: false
                  }
                }
              }
            ],
            SelectionSet: {
              Kind: SelectionSet,
              Selections: [
                {
                  Kind: Field,
                  Name: {
                    Value: {
                      IsEmpty: false
                    },
                    StringValue: argument
                  }
                }
              ]
            }
          },
          FieldDefinition: {
            Name: withAttachment,
            Type: ResultGraph,
            ResolvedType: {
              IsTypeOf: {
                Type: Func<object, bool>,
                Target: ObjectGraphType<Result>.<>c,
                Method: Boolean .ctor(System.Object)
              },
              SkipTypeCheck: false,
              Interfaces: [],
              ResolvedInterfaces: [],
              Fields: [
                {
                  Name: argument,
                  Type: NonNullGraphType<StringGraphType>,
                  ResolvedType: {
                    Type: StringGraphType,
                    ResolvedType: {
                      Name: String,
                      IsPrivate: false
                    },
                    IsPrivate: false
                  },
                  Resolver: {},
                  IsPrivate: false,
                  Metadata: {
                    ORIGINAL_EXPRESSION_PROPERTY_NAME: Argument
                  }
                }
              ],
              Name: ResultGraph,
              IsPrivate: false
            },
            Arguments: [
              {
                Name: argument,
                ResolvedType: {
                  Type: StringGraphType,
                  ResolvedType: {
                    Name: String,
                    IsPrivate: false
                  },
                  IsPrivate: false
                },
                Type: NonNullGraphType<StringGraphType>
              }
            ],
            Resolver: {},
            IsPrivate: false
          },
          Name: withAttachment,
          Result: {
            Argument: argumentValue
          },
          Path: [
            withAttachment
          ],
          ResponsePath: [
            withAttachment
          ]
        }
      ],
      GraphType: {
        SkipTypeCheck: false,
        Interfaces: [],
        ResolvedInterfaces: [],
        Fields: [
          {
            Name: noAttachment,
            Type: ResultGraph,
            ResolvedType: {
              IsTypeOf: {
                Type: Func<object, bool>,
                Target: ObjectGraphType<Result>.<>c,
                Method: Boolean .ctor(System.Object)
              },
              SkipTypeCheck: false,
              Interfaces: [],
              ResolvedInterfaces: [],
              Fields: [
                {
                  Name: argument,
                  Type: NonNullGraphType<StringGraphType>,
                  ResolvedType: {
                    Type: StringGraphType,
                    ResolvedType: {
                      Name: String,
                      IsPrivate: false
                    },
                    IsPrivate: false
                  },
                  Resolver: {},
                  IsPrivate: false,
                  Metadata: {
                    ORIGINAL_EXPRESSION_PROPERTY_NAME: Argument
                  }
                }
              ],
              Name: ResultGraph,
              IsPrivate: false
            },
            Arguments: [
              {
                Name: argument,
                ResolvedType: {
                  Type: StringGraphType,
                  ResolvedType: {
                    Name: String,
                    IsPrivate: false
                  },
                  IsPrivate: false
                },
                Type: NonNullGraphType<StringGraphType>
              }
            ],
            Resolver: {},
            IsPrivate: false
          },
          {
            Name: withAttachment,
            Type: ResultGraph,
            ResolvedType: {
              IsTypeOf: {
                Type: Func<object, bool>,
                Target: ObjectGraphType<Result>.<>c,
                Method: Boolean .ctor(System.Object)
              },
              SkipTypeCheck: false,
              Interfaces: [],
              ResolvedInterfaces: [],
              Fields: [
                {
                  Name: argument,
                  Type: NonNullGraphType<StringGraphType>,
                  ResolvedType: {
                    Type: StringGraphType,
                    ResolvedType: {
                      Name: String,
                      IsPrivate: false
                    },
                    IsPrivate: false
                  },
                  Resolver: {},
                  IsPrivate: false,
                  Metadata: {
                    ORIGINAL_EXPRESSION_PROPERTY_NAME: Argument
                  }
                }
              ],
              Name: ResultGraph,
              IsPrivate: false
            },
            Arguments: [
              {
                Name: argument,
                ResolvedType: {
                  Type: StringGraphType,
                  ResolvedType: {
                    Name: String,
                    IsPrivate: false
                  },
                  IsPrivate: false
                },
                Type: NonNullGraphType<StringGraphType>
              }
            ],
            Resolver: {},
            IsPrivate: false
          }
        ],
        Name: Mutation,
        IsPrivate: false
      }
    },
    Query: {
      IsEmpty: false
    }
  },
  Attachments: {
    HasPendingAttachments: true,
    Inner: {
      key: {
        Headers: null,
        Value: Incoming
      }
    }
  }
}